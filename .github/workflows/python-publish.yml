# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  check-update:
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.post.outputs.build }}
      update: ${{ steps.post.outputs.update }}
      version: ${{ steps.post.outputs.version }}
    steps:
      - name: fetch all tags
        uses: actions/checkout@v4
        if: ${{ inputs.targetVersion != '' }}
        with:
          fetch-depth: 0
      - name: fetch latest tag
        uses: actions/checkout@v4
        if: ${{ inputs.targetVersion == '' }}

      - name: Pre-check
        id: pre
        if: ${{ inputs.targetVersion != '' }}
        run: |
          calibre_url="https://raw.githubusercontent.com/kovidgoyal/calibre/v${{ inputs.targetVersion }}/src/calibre/db/backend.py"
          status_code=`curl -s -o /dev/null -w "%{http_code}" "${calibre_url}"`
          if [ ${status_code} = "200" ]; then
            if [ ! $(git tag -l "v${{ inputs.targetVersion }}") ]; then
              echo "Target version check OK"
              echo "build=1"                   >> $GITHUB_OUTPUT
              echo "update=0"                  >> $GITHUB_OUTPUT
              echo "version=${{ inputs.targetVersion }}"  >> $GITHUB_OUTPUT
            else
              # 本仓库 Tag 已存在
              echo "Tag exists"
              echo "::error title=Tag exists::Perhaps a patch for v${{ inputs.targetVersion }} has been created"
              echo "build=0"                   >> $GITHUB_OUTPUT
              echo "update=0"                  >> $GITHUB_OUTPUT
            fi
          else
            # 目标版本不存在
            echo "Target version not found"
            echo "::error title=Invalid version::Calibre v${{ inputs.targetVersion }} not exists"
            echo "build=0"                     >> $GITHUB_OUTPUT
            echo "update=0"                    >> $GITHUB_OUTPUT
          fi
          cat $GITHUB_OUTPUT
      - name: Check Version
        id: check
        if: ${{ inputs.targetVersion == '' }}
        run: |
          curl -k https://code.calibre-ebook.com/latest -o REMOTE_VERSION
          echo "version=$(cat REMOTE_VERSION)" >> $GITHUB_OUTPUT
          if diff --brief REMOTE_VERSION CALIBRE_VERSION > /dev/null; then
            echo "::notice title=Calibre Version not Changed::$(cat REMOTE_VERSION)"
            echo "build=0"   >> $GITHUB_OUTPUT
            echo "update=0"  >> $GITHUB_OUTPUT
          else
            echo "::notice title=New Version Found!::$(cat REMOTE_VERSION)"
            echo "build=1"    >> $GITHUB_OUTPUT
            echo "update=1"   >> $GITHUB_OUTPUT
          fi
      - name: Post-check
        id: post
        run: |
          if [ "${{ inputs.targetVersion }}" = '' ]; then
            echo "build=${{ steps.check.outputs.build }}"      >> $GITHUB_OUTPUT
            echo "update=${{ steps.check.outputs.update }}"    >> $GITHUB_OUTPUT
            echo "version=${{ steps.check.outputs.version }}"  >> $GITHUB_OUTPUT
          else
            echo "build=${{ steps.pre.outputs.build }}"        >> $GITHUB_OUTPUT
            echo "update=${{ steps.pre.outputs.update }}"      >> $GITHUB_OUTPUT
            echo "version=${{ steps.pre.outputs.version }}"    >> $GITHUB_OUTPUT
          fi

  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flit
    - name: Build package
      run: flit build
    - name: Create Release
      uses: softprops/action-gh-release@v0.1.15
      with:
        body: mdict v${{ needs.check-update.outputs.version }}
        draft: false
        tag_name: v${{ needs.check-update.outputs.version }}
        # 因为 softprops/action-gh-releas 还没加 make_latest 选项，所以先用 prerelease 标记
        # 相关 PR：https://github.com/softprops/action-gh-release/pull/304
        prerelease: ${{ !needs.check-update.outputs.update }}
        files: |
          dist/*.whl
